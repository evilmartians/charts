{{- range .Values.apps }}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  annotations:
  labels:
    app.kubernetes.io/name: {{ .name }}-backup-create
    app.kubernetes.io/instance: {{ $.Release.Name }}
  name: {{ .name }}-cloudsql-backup-create
spec:
  concurrencyPolicy: Forbid
  failedJobsHistoryLimit: 3
  jobTemplate:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .name }}-backup-create
        app.kubernetes.io/instance: {{ $.Release.Name }}
      name: cloudsql-backup-create
    spec:
      activeDeadlineSeconds: {{ .backupTimeout | default 7200 }}
      backoffLimit: 3
      completions: 1
      parallelism: 1
      template:
        metadata:
          labels:
            app.kubernetes.io/name: {{ .name }}-backup-create
            app.kubernetes.io/instance: {{ $.Release.Name }}
        spec:
          containers:
          - name: restic
            image: "{{ $.Values.restic.image.repository }}:{{ $.Values.restic.image.tag }}"
            imagePullPolicy: {{ $.Values.restic.image.pullPolicy }}
            command:
            - /bin/sh
            - -c
            {{- if .Values.restic.storage.enabled }}
            - /usr/local/bin/pg_dump --verbose --format=c --compress=1 --file /backup/${PGDATABASE}.dump && /usr/bin/restic backup --host={{ .name }}-backup --verbose /backup/${PGDATABASE}.dump; rm -rf /backup/${PGDATABASE}.dump
            {{- else }}
            - '/usr/local/bin/pg_dump --verbose --format=c --compress=1 | /usr/bin/restic backup --host={{ .name }}-backup --verbose --stdin --stdin-filename="${PGDATABASE}.dump"'
            {{- end }}
            envFrom:
            - secretRef:
                name: {{ .resticCredentialsSecretName }}
            - secretRef:
                name: {{ .postgresCredentialsSecretName }}
            {{- if .resources }}
            resources: {{- toYaml .resources | nindent 14 }}
            {{- end }}
            volumeMounts:
            {{- if .configFilesSecretName }}
            - name: config-files
              mountPath: /config
            {{- end }}
            {{- if .Values.restic.storage.enabled }}
            - name: storage
              mountPath: "/backup"
            {{- end }}
          dnsPolicy: ClusterFirst
          restartPolicy: OnFailure
          volumes:
          {{- if .configFilesSecretName }}
          - name: config-files
            secret:
              secretName: {{ .configFilesSecretName }}
          {{- end }}
          {{- if .Values.restic.storage.enabled }}
          - name: storage
            persistentVolumeClaim:
              claimName: {{ .name }}-cloudsql-backup-create
          {{- end }}
          {{- with $.Values.restic.affinity }}
          affinity:
          {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- if .nodeSelector }}
          nodeSelector: {{- toYaml .nodeSelector | nindent 12 }}
          {{- end }}
          {{- if .tolerations }}
          tolerations: {{- toYaml .tolerations | indent 12 }}
          {{- end }}
  schedule: {{ .backupSchedule }}
  successfulJobsHistoryLimit: 3
  suspend: false
{{ end }}

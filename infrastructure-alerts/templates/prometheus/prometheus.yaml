---
{{- if .Values.ruleGroups.prometheus.enabled }}
{{- $prometheusJob := .Values.prometheusJob }}
{{- $namespace := printf "%s" (include "infrastructure-alerts.namespace" .) }}
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: {{ printf "%s-%s" (include "infrastructure-alerts.fullname" .) "prometheus" | trunc 63 | trimSuffix "-" }}
  namespace: {{ template "infrastructure-alerts.namespace" . }}
  labels:
    app: {{ template "infrastructure-alerts.name" . }}
    {{- include "infrastructure-alerts.labels" . | nindent 4 }}
    {{- if .Values.labels }}
    {{- toYaml .Values.labels | nindent 4 }}
    {{- end }}
  {{- if .Values.annotations }}
  annotations:
    {{- toYaml .Values.annotations | nindent 4 }}
  {{- end }}
spec:
  groups:
  - name: prometheus
    rules:
    {{- if not (has "PrometheusBadConfig" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusBadConfig
      annotations:
        description: Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} has failed to reload its configuration.
        summary: Failed Prometheus configuration reload.
      expr: |-
        # Without max_over_time, failed scrapes could create false negatives, see
        # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
        max_over_time(prometheus_config_last_reload_successful{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m]) == 0
      for: 10m
      labels:
        severity: dangerous
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
    {{- if not (has "PrometheusNotificationQueueRunningFull" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusNotificationQueueRunningFull
      annotations:
        description: Alert notification queue of Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} is running full.
        summary: Prometheus alert notification queue predicted to run full in less than 30m.
      expr: |-
        # Without min_over_time, failed scrapes could create false negatives, see
        # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
        (
          predict_linear(prometheus_notifications_queue_length{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m], 60 * 30)
        >
          min_over_time(prometheus_notifications_queue_capacity{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m])
        )
      for: 15m
      labels:
        severity: warning
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
    {{- if not (has "PrometheusErrorSendingAlertsToSomeAlertmanagers" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusErrorSendingAlertsToSomeAlertmanagers
      annotations:
        description: '{{`{{`}} printf "%.1f" $value {{`}}`}}% errors while sending alerts from Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} to Alertmanager {{`{{`}}$labels.alertmanager{{`}}`}}.'
        summary: Prometheus has encountered more than 1% errors sending alerts to a specific Alertmanager.
      expr: |-
        (
          rate(prometheus_notifications_errors_total{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m])
        /
          rate(prometheus_notifications_sent_total{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m])
        )
        * 100
        > 1
      for: 15m
      labels:
        severity: warning
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
    {{- if not (has "PrometheusErrorSendingAlertsToAnyAlertmanager" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusErrorSendingAlertsToAnyAlertmanager
      annotations:
        description: '{{`{{`}} printf "%.1f" $value {{`}}`}}% minimum errors while sending alerts from Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} to any Alertmanager.'
        summary: Prometheus encounters more than 3% errors sending alerts to any Alertmanager.
      expr: |-
        min without(alertmanager) (
          rate(prometheus_notifications_errors_total{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m])
        /
          rate(prometheus_notifications_sent_total{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m])
        )
        * 100
        > 3
      for: 15m
      labels:
        severity: dangerous
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
    {{- if not (has "PrometheusNotConnectedToAlertmanagers" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusNotConnectedToAlertmanagers
      annotations:
        description: Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} is not connected to any Alertmanagers.
        summary: Prometheus is not connected to any Alertmanagers.
      expr: |-
        # Without max_over_time, failed scrapes could create false negatives, see
        # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
        max_over_time(prometheus_notifications_alertmanagers_discovered{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m]) < 1
      for: 10m
      labels:
        severity: warning
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
    {{- if not (has "PrometheusTSDBReloadsFailing" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusTSDBReloadsFailing
      annotations:
        description: Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} has detected {{`{{`}}$value | humanize{{`}}`}} reload failures over the last 3h.
        summary: Prometheus has issues reloading blocks from disk.
      expr: increase(prometheus_tsdb_reloads_failures_total{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[3h]) > 0
      for: 4h
      labels:
        severity: warning
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
    {{- if not (has "PrometheusTSDBCompactionsFailing" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusTSDBCompactionsFailing
      annotations:
        description: Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} has detected {{`{{`}}$value | humanize{{`}}`}} compaction failures over the last 3h.
        summary: Prometheus has issues compacting blocks.
      expr: increase(prometheus_tsdb_compactions_failed_total{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[3h]) > 0
      for: 4h
      labels:
        severity: warning
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
    {{- if not (has "PrometheusNotIngestingSamples" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusNotIngestingSamples
      annotations:
        description: Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} is not ingesting samples.
        summary: Prometheus is not ingesting samples.
      expr: rate(prometheus_tsdb_head_samples_appended_total{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m]) <= 0
      for: 10m
      labels:
        severity: warning
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
    {{- if not (has "PrometheusDuplicateTimestamps" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusDuplicateTimestamps
      annotations:
        description: Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} is dropping {{`{{`}} printf "%.4g" $value  {{`}}`}} samples/s with different values but duplicated timestamp.
        summary: Prometheus is dropping samples with duplicate timestamps.
      expr: rate(prometheus_target_scrapes_sample_duplicate_timestamp_total{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m]) > 0
      for: 10m
      labels:
        severity: warning
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
    {{- if not (has "PrometheusOutOfOrderTimestamps" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusOutOfOrderTimestamps
      annotations:
        description: Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} is dropping {{`{{`}} printf "%.4g" $value  {{`}}`}} samples/s with timestamps arriving out of order.
        summary: Prometheus drops samples with out-of-order timestamps.
      expr: rate(prometheus_target_scrapes_sample_out_of_order_total{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m]) > 0
      for: 10m
      labels:
        severity: warning
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
    {{- if not (has "PrometheusRemoteStorageFailures" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusRemoteStorageFailures
      annotations:
        description: Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} failed to send {{`{{`}} printf "%.1f" $value {{`}}`}}% of the samples to {{`{{`}} $labels.remote_name{{`}}`}}:{{`{{`}} $labels.url {{`}}`}}
        summary: Prometheus fails to send samples to remote storage.
      expr: |-
        (
          rate(prometheus_remote_storage_failed_samples_total{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m])
        /
          (
            rate(prometheus_remote_storage_failed_samples_total{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m])
          +
            rate(prometheus_remote_storage_succeeded_samples_total{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m])
          )
        )
        * 100
        > 1
      for: 15m
      labels:
        severity: dangerous
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
    {{- if not (has "PrometheusRemoteWriteBehind" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusRemoteWriteBehind
      annotations:
        description: Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} remote write is {{`{{`}} printf "%.1f" $value {{`}}`}}s behind for {{`{{`}} $labels.remote_name{{`}}`}}:{{`{{`}} $labels.url {{`}}`}}.
        summary: Prometheus remote write is behind.
      expr: |-
        # Without max_over_time, failed scrapes could create false negatives, see
        # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
        (
          max_over_time(prometheus_remote_storage_highest_timestamp_in_seconds{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m])
        - on(job, instance) group_right
          max_over_time(prometheus_remote_storage_queue_highest_sent_timestamp_seconds{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m])
        )
        > 120
      for: 15m
      labels:
        severity: dangerous
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
    {{- if not (has "PrometheusRemoteWriteDesiredShards" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusRemoteWriteDesiredShards
      annotations:
        description: Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} remote write desired shards calculation wants to run {{`{{`}} $value {{`}}`}} shards for queue {{`{{`}} $labels.remote_name{{`}}`}}:{{`{{`}} $labels.url {{`}}`}}, which is more than the max of {{`{{`}} printf `prometheus_remote_storage_shards_max{instance="%s",job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}` $labels.instance | query | first | value {{`}}`}}.
        summary: Prometheus remote write desired shards calculation wants to run more than configured max shards.
      expr: |-
        # Without max_over_time, failed scrapes could create false negatives, see
        # https://www.robustperception.io/alerting-on-gauges-in-prometheus-2-0 for details.
        (
          max_over_time(prometheus_remote_storage_shards_desired{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m])
        >
          max_over_time(prometheus_remote_storage_shards_max{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m])
        )
      for: 15m
      labels:
        severity: warning
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
    {{- if not (has "PrometheusRuleFailures" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusRuleFailures
      annotations:
        description: Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} has failed to evaluate {{`{{`}} printf "%.0f" $value {{`}}`}} rules in the last 5m.
        summary: Prometheus is failing rule evaluations.
      expr: increase(prometheus_rule_evaluation_failures_total{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m]) > 0
      for: 15m
      labels:
        severity: dangerous
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
    {{- if not (has "PrometheusMissingRuleEvaluations" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusMissingRuleEvaluations
      annotations:
        description: Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} has missed {{`{{`}} printf "%.0f" $value {{`}}`}} rule group evaluations in the last 5m.
        summary: Prometheus is missing rule evaluations due to slow rule group evaluation.
      expr: increase(prometheus_rule_group_iterations_missed_total{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m]) > 0
      for: 15m
      labels:
        severity: warning
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
    {{- if not (has "PrometheusTargetLimitHit" .Values.ruleGroups.prometheus.disabledRules)}}
    - alert: PrometheusTargetLimitHit
      annotations:
        description: Prometheus {{`{{`}}$labels.namespace{{`}}`}}/{{`{{`}}$labels.pod{{`}}`}} has dropped {{`{{`}} printf "%.0f" $value {{`}}`}} targets because the number of targets exceeded the configured target_limit.
        summary: Prometheus has dropped targets because some scrape configs have exceeded the targets limit.
      expr: increase(prometheus_target_scrape_pool_exceeded_target_limit_total{job="{{ $prometheusJob }}",namespace="{{ $namespace }}"}[5m]) > 0
      for: 15m
      labels:
        severity: warning
        {{- if .Values.additionalRuleLabels }}
        {{- toYaml .Values.additionalRuleLabels | nindent 8 }}
        {{- end }}
    {{- end }}
{{- end }}
